import torch
import torch.nn as nn
import numpy as np
from sklearn import datasets
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split

bc = datasets.load_breast_cancer()

X, y = bc.data, bc.target

n_samples, n_features = X.shape
print(n_samples, n_features)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=69420)

sc = StandardScaler()

X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

X_train = torch.from_numpy(X_train.astype(np.float32))
X_test = torch.from_numpy(X_test.astype(np.float32))
y_train = torch.from_numpy(y_train.astype(np.float32))
y_test = torch.from_numpy(y_test.astype(np.float32))

y_train = y_train.view(y_train.shape[0], 1)
y_test = y_test.view(y_test.shape[0], 1)

# model
class LogReg(nn.Module):

    def __init__(self, ninputfeatures):
        super(LogReg, self).__init__()
        self.linear = nn.Linear(ninputfeatures, 1)

    def forward(self, x):
        ypred = torch.sigmoid(self.linear(x))
        return ypred

model = LogReg(n_features)

#loss
criterion = nn.BCELoss()
optimizer = torch.optim.Adagrad(model.parameters(), 0.02)

#3
epochs = 100
for epoch in range(epochs):
    #forward and loss
    ypred = model(X_train)
    loss = criterion(ypred, y_train)

    loss.backward()

    optimizer.step()

    optimizer.zero_grad()

    if epoch % 10 == 0:
        print(f'epoch: {epoch}, loss = {loss.item():.3f}')
    
    with torch.no_grad():
        ypred = model(X_test)
        ypredcls = ypred.round()
        acc = ypredcls.eq(y_test).sum() / float(y_test.shape[0])
        print(f'accuracy = {acc:.3f}')
